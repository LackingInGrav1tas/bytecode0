fn c_to_n(c: STR) {
    if ($c == "a") return 0;
    else if ($c == "b") return 1;
    else if ($c == "c") return 2;
    else if ($c == "d") return 3;
    else if ($c == "e") return 4;
    else if ($c == "f") return 5;
    else if ($c == "g") return 6;
    else if ($c == "h") return 7;
    else if ($c == "i") return 8;
    else if ($c == "j") return 9;
    else if ($c == "k") return 10;
    else if ($c == "l") return 11;
    else if ($c == "m") return 12;
    else if ($c == "n") return 13;
    else if ($c == "o") return 14;
    else if ($c == "p") return 15;
    else if ($c == "q") return 16;
    else if ($c == "r") return 17;
    else if ($c == "s") return 18;
    else if ($c == "t") return 19;
    else if ($c == "u") return 20;
    else if ($c == "v") return 21;
    else if ($c == "w") return 22;
    else if ($c == "x") return 23;
    else if ($c == "y") return 24;
    else if ($c == "z") return 25;
}

fn n_to_c(c: NUM) {
    if ($c == 0) return "a";
    else if ($c == 1) return "b";
    else if ($c == 2) return "c";
    else if ($c == 3) return "d";
    else if ($c == 4) return "e";
    else if ($c == 5) return "f";
    else if ($c == 6) return "g";
    else if ($c == 7) return "h";
    else if ($c == 8) return "i";
    else if ($c == 9) return "j";
    else if ($c == 10) return "k";
    else if ($c == 11) return "l";
    else if ($c == 12) return "m";
    else if ($c == 13) return "n";
    else if ($c == 14) return "o";
    else if ($c == 15) return "p";
    else if ($c == 16) return "q";
    else if ($c == 17) return "r";
    else if ($c == 18) return "s";
    else if ($c == 19) return "t";
    else if ($c == 20) return "u";
    else if ($c == 21) return "v";
    else if ($c == 22) return "w";
    else if ($c == 23) return "x";
    else if ($c == 24) return "y";
    else if ($c == 25) return "z";
}

print "encrypt or decrypt? (e/d) ";
set mut c;
getc c;

set mut plaintext = @input("\nenter text: ");
set mut key = @input("enter key: ") as NUM;

if ($c == "d") key = -$key;

set mut ciphertext = "";
set mut i = 0;
while ($i < sizeof $plaintext) {
    ciphertext ||= @n_to_c( (@c_to_n( $plaintext at $i ) + $key) mod 26 );
    i += 1;
}

print $ciphertext;